import{_ as i,Y as o,Z as t,a0 as s,a1 as n,a2 as l,a4 as a,E as c}from"./framework-957baa9a.js";const r={},d=a('<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h1><p>[TOC]</p><h2 id="_1-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-基本概念" aria-hidden="true">#</a> 1. 基本概念</h2><ul><li><p>LXC(Linux Containers) 操作系统层面化的虚拟技术, 只运行1个内核, 一个虚拟化的可执行内核就是一个容器,可以绑定CPU和内存的使用, 分配特定比例的CPU的时间, IO时间, 容器技术的本质是对对计算机系统资源的隔离和控制</p></li><li><p>Docker 是一个虚拟环境的容器.</p></li><li><p>Docker特点和应用场景 个人开发机和服务器不是同一个操作环境 应用程序需要不同的应用环境 耗费资源很小</p></li></ul><h3 id="虚拟机or用容器技术" tabindex="-1"><a class="header-anchor" href="#虚拟机or用容器技术" aria-hidden="true">#</a> 虚拟机or用容器技术</h3><ol><li>一个应用通常需要启动很多服务, 每个服务器需要一个容器, 开发麻烦</li><li>Docker桌面环境支持少</li><li>所以开发使用vagrant虚拟机, 部署使用docker</li></ol><hr><h2 id="_2-安装和开始" tabindex="-1"><a class="header-anchor" href="#_2-安装和开始" aria-hidden="true">#</a> 2. 安装和开始</h2><h3 id="_1-windows" tabindex="-1"><a class="header-anchor" href="#_1-windows" aria-hidden="true">#</a> 1. windows</h3><ol><li><p>安装软件 官网安装, 目录: <code>C:\\Program Files\\Docker</code></p></li><li><p>文件目录<br> docker pull下载后的文件位置: <code>C:\\Users\\Public\\Documents\\Hyper-V\\Virtual Hard Disks</code></p><blockquote><p><strong>说明:</strong> windows上的docker本质上还是借助与windows平台的hyper-v创建一个linux虚拟机，你执行的所有命令都是在这个虚拟机里执行的，所有pull到本地的image都会在虚拟机的Virtual hard disks目录的文件中，这个文件就是虚拟硬盘文件（有点类似与vmware的原理）。 因此你打开hyper-v管理器，可以找到docker创建的虚拟机，点击左侧的虚拟机名称，然后再点击右边的移动选项，按照向导将虚拟机移动到其他目录即可。 另外还可以在菜单栏点击:操作-&gt;Hyper-v设置，来调整你所有虚拟机的虚拟硬盘文件的默认存储位置</p></blockquote></li><li><p>说明 windows10安装了docker,要求启用hyper-v来运行运行docker的虚拟机MobyLinuxVM, 所以需要重启 启用关闭Hyper-V的方法:</p><ul><li>管理员身份打开PowerShell</li><li>bcdedit # 查看Hyper-V是否启用</li><li>bcdedit /set hypervisorlaunchtype auto # 设置为启动</li></ul></li></ol><h3 id="_2-linux-centos" tabindex="-1"><a class="header-anchor" href="#_2-linux-centos" aria-hidden="true">#</a> 2. linux(centos)</h3>',11),p=a(`<li><p>使用仓库安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils device-mapper-persistent-data lvm2
<span class="token function">sudo</span> yum-config-manager --add-repo <span class="token operator">&lt;</span>https://download.docker.com/linux/centos/docker-ce.repo<span class="token operator">&gt;</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用脚本安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span>curl <span class="token parameter variable">-fsSL</span> <span class="token operator">&lt;</span>https://get.docker.com<span class="token operator">&gt;</span> <span class="token parameter variable">-o</span> get-docker.sh
<span class="token function">sudo</span> <span class="token function">sh</span> get-docker.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start <span class="token function">docker</span>  <span class="token comment"># 启动docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,3),u={href:"https://stackoverflow.com/questions/45415524/installing-docker-ce-in-redhat/47903707#47903707",target:"_blank",rel:"noopener noreferrer"},m=a(`<ul><li>安装</li></ul><blockquote><p>sudo yum install -y docker</p></blockquote><ul><li>错误 (报错: <code>No package docker available.</code> 或 <code>Package: docker-ce-17.06.0.ce-1.el7.centos.x86_64 (docker-ce-stable) Requires: container-selinux &gt;= 2.9</code>) <ul><li><p>对于RHEL 7.x以上的系统, docker在 <code>rhel-7-server-extras-rpms</code>仓库中, 可以使用如下命令生效: <code>subscription-manager repos --enable=rhel-7-server-extras-rpms</code></p></li><li><p>如果系统(如: aws上的RHEL)没有任何subscription, 可以使用centos的扩充yum源, 方法如下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/yum.repos.d/centos.repo

<span class="token punctuation">[</span>CentOS-extras<span class="token punctuation">]</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-7-Extras
<span class="token assign-left variable">mirrorlist</span><span class="token operator">=</span>http://mirrorlist.centos.org/?release<span class="token operator">=</span><span class="token number">7</span><span class="token operator">&amp;</span><span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token variable">$basearch</span><span class="token operator">&amp;</span><span class="token assign-left variable">repo</span><span class="token operator">=</span>extras<span class="token operator">&amp;</span><span class="token assign-left variable">infra</span><span class="token operator">=</span><span class="token variable">$infra</span>
<span class="token comment">#baseurl=http://mirror.centos.org/centos/$releasever/extras/$basearch/</span>
<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,3),v={href:"https://docs.docker.com/engine/install/centos/#install-using-the-repository",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"Docker version 1.13.1",-1),b=a(`<ol><li><p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除历史版本</span>
<span class="token function">sudo</span> <span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
            docker-client <span class="token punctuation">\\</span>
            docker-client-latest <span class="token punctuation">\\</span>
            docker-common <span class="token punctuation">\\</span>
            docker-latest <span class="token punctuation">\\</span>
            docker-latest-logrotate <span class="token punctuation">\\</span>
            docker-logrotate <span class="token punctuation">\\</span>
            docker-engine

<span class="token comment"># 配置源</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
<span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    https://download.docker.com/linux/centos/docker-ce.repo

<span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-compose-plugin

<span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>check</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token parameter variable">--version</span>
<span class="token comment"># Docker version 20.10.22, build 3a2c30b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,1),h=s("h3",{id:"_3-macos",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3-macos","aria-hidden":"true"},"#"),n(" 3. macos")],-1),g={href:"https://www.runoob.com/docker/macos-docker-install.html",target:"_blank",rel:"noopener noreferrer"},f=a(`<ol><li><p>homebrew安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>brew cask <span class="token function">install</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="_3-docker常用命令" tabindex="-1"><a class="header-anchor" href="#_3-docker常用命令" aria-hidden="true">#</a> 3. Docker常用命令</h2>`,2),_={href:"https://segmentfault.com/a/1190000008876540#articleHeader21",target:"_blank",rel:"noopener noreferrer"},x=s("br",null,null,-1),y={href:"https://jiajially.gitbooks.io/dockerguide/content/index.html",target:"_blank",rel:"noopener noreferrer"},w=s("h3",{id:"_1-命令",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-命令","aria-hidden":"true"},"#"),n(" 1. 命令")],-1),q=a(`<li><p>查看docker版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>image 查看本地有哪些镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> image <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>search 搜索docker镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>pull 下载需要的docker镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull ubuntu:rolling
<span class="token comment"># The centos: **latest** tag is always the most recent version currently available.</span>
<span class="token function">docker</span> pull centos:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>rmi 删除映像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi image_name  <span class="token comment"># 删除映像</span>
<span class="token function">docker</span> rmi image_name <span class="token parameter variable">-f</span> <span class="token comment"># 强制删除映像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>ps/container 查看本地有哪些容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> container <span class="token function">ls</span>  <span class="token comment"># 只列出正在运行的</span>
<span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">--all</span>  <span class="token comment"># 列出所有, 包括运行结束的</span>
<span class="token function">docker</span> <span class="token function">ps</span>  <span class="token comment"># 查看正在运行的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">--all</span>  <span class="token comment"># 查看所有的容器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>create 创建容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> create <span class="token operator">&lt;</span>选项<span class="token operator">&gt;</span><span class="token operator">&lt;</span>镜像名称,id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>命令<span class="token operator">&gt;</span><span class="token operator">&lt;</span>参数<span class="token operator">&gt;</span>
<span class="token parameter variable">-i</span>  <span class="token comment"># 交互式操作</span>
<span class="token parameter variable">-t</span>  <span class="token comment"># 终端</span>
<span class="token parameter variable">--rm</span>    <span class="token comment"># --rm 等价于 --rm=True, 默认False,若容器内的进程终止，则自动删除容器，此选项不能与-d选项一起使用, 一旦退出则删除, 一般用于测试</span>
<span class="token parameter variable">--attach</span><span class="token operator">=</span><span class="token string">&quot;stdin&quot;</span>  <span class="token comment"># 将标准输入、标准输出、标准错误链接到容器</span>
--add-host<span class="token operator">=</span>hello:192.168.0.233  <span class="token comment"># 向容器的/etc/hosts添加主机名与IP地址</span>
--add-host<span class="token operator">=</span>host.docker.internal:host-gateway <span class="token comment"># 实现容器访问主机端口, linux需要适用, mac直接访问docker.for.mac.host.internal</span>
<span class="token parameter variable">--link</span> mysql-server:mysql   <span class="token comment"># 进行容器连接，格式为&lt;容器名称&gt;:&lt;别名&gt;</span>
<span class="token parameter variable">--name</span> <span class="token comment"># 设置容器名称</span>
<span class="token parameter variable">--net</span><span class="token operator">=</span><span class="token string">&quot;bridge&quot;</span> <span class="token comment"># 设置容器的网络模式（选项可以是：bridge,none,container,host）</span>
-P、--publish-all<span class="token operator">=</span>false <span class="token comment"># 将连接到主机的容器的所有端口暴露在外</span>
-p、--publish<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 如:-p 3128:3128 将连接到主机的容器的特定端口暴露在外。一般主要用于暴露web服务器的端口</span>
-v、--volume<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 设置数据卷。设置要与主机共享目录，不将文件保存到容器，而直接保存到主机。在主机目录后添加 :ro、:rw进行读写设置，默认为:rw</span>
-w、--workdir<span class="token operator">=</span><span class="token string">&quot;&quot;</span>    <span class="token comment"># 设置容器内部要运行进程的目录</span>
<span class="token parameter variable">--privileged</span>    <span class="token comment"># 特权模式</span>
-d、--detach    <span class="token comment"># Detach模式，一般为守护进程模式，容器以后台方式运行</span>
--sig-proxy<span class="token operator">=</span>true    <span class="token comment"># 将所有信号传递给进程（非TTY模式时也一样），但不传递SIGCHLD、SIGKILL、SIGSTOP信号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>run 启动容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 参数同create</span>
<span class="token function">docker</span> run <span class="token operator">&lt;</span>选项<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>镜像名称，id<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>命令<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>参数<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>start/attach/restart 启动并登陆指定容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start 858fd7c6a9d5<span class="token punctuation">(</span>container_id<span class="token punctuation">)</span>  <span class="token comment"># 启动一个容器</span>
<span class="token function">docker</span> attach container_name/container_id  <span class="token comment"># 重新登陆指定容器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>pause/unpause 暂停/启动容器</p></li><li><p>exit 退出容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">exit</span>  <span class="token comment"># 即可退出并关闭</span>
或使用 ctrl + D
<span class="token comment"># 退出并后台运行:</span>
ctrl + P + Q
或: Ctrl + P , Ctrl + D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>logs 查看容器日志</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs 858fd7c6a9d5<span class="token punctuation">(</span>container_id<span class="token punctuation">)</span>  <span class="token comment"># 查看容器的log</span>
<span class="token parameter variable">-f</span> <span class="token comment"># 持续输出</span>
<span class="token parameter variable">--tail</span><span class="token operator">=</span><span class="token number">7</span>    <span class="token comment"># 指定数量</span>
<span class="token parameter variable">-t</span>  <span class="token comment"># 显示时间戳 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>port 查看容器开放的端口</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> port 858fd7c6a9d5<span class="token punctuation">(</span>container_id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>cp 容器和外界文件传输</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">cp</span> contain_id:/root/DTP/output.xlsx ~/new_dir/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>top 查看容器进程信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">top</span> 858fd7c6a9d5<span class="token punctuation">(</span>container_id<span class="token punctuation">)</span> aux  <span class="token comment"># 查看容器的进程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>exec 从外部运行内部的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 858fd7c6a9d5<span class="token punctuation">(</span>container_id<span class="token punctuation">)</span> /bin/bash  <span class="token comment"># 连接容器</span>
<span class="token function">ps</span> ax
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>export 容器持久化</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 不保存历史的导入导出</span>
<span class="token function">docker</span> <span class="token builtin class-name">export</span> contain_id <span class="token operator">&gt;</span> ./new_contain.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>save</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 保存历史的导入导出</span>
<span class="token function">docker</span> save contain_id <span class="token operator">&gt;</span> ./new_contain.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>import 容器的导入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">import</span> dtp_container.tar dtp  <span class="token comment"># 容器的名称将是dtp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>commit 容器制作镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 根据容器的改变生成一个新的镜像</span>
<span class="token function">docker</span> commit contain_id ./new_image.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>rm 删除容器操作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> container_id/container_name  <span class="token comment"># 删除容器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>rmi 删除镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi image_name  <span class="token comment"># 删除镜像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>info 显示当前系统信息、docker容器、镜像个数、设置等信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,23),D={href:"https://blog.51cto.com/lizhenliang/1975466",target:"_blank",rel:"noopener noreferrer"},P=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-name</span> centos7 <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true centos:7 /usr/sbin/init    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),C=a(`<h3 id="_2-启动容器注意" tabindex="-1"><a class="header-anchor" href="#_2-启动容器注意" aria-hidden="true">#</a> 2. 启动容器注意</h3><ol><li>配置参数可以看官方说明, 一般映射左侧为宿主机, 右侧为docker内: <ol><li>--volume /path/to/config:/config, 数据卷挂载, 统一挂载到/docker_data/contain_name/</li><li>--port 3306:3306, 端口转发</li><li>--restart=unless-stopped 重启选项, 一直重启或一直重启除非停止</li><li>其他</li></ol></li><li>启动参考 <ol><li>docker run -p 3306:3306 --restart=always --name mymysql -v /srv/dev-disk-by-label-other/docker_data/mysql/conf:/etc/mysql/conf.d -v /srv/dev-disk-by-label-other/docker_data/mysql/logs:/var/log/mysql -v /srv/dev-disk-by-label-other/docker_data/mysql/db:/var/lib/mysql -v /srv/dev-disk-by-label-other/docker_data/mysql/mysql_files:/var/lib/mysql-files -e MYSQL_ROOT_PASSWORD=maxiaoteng -d mysql:latest <ol><li>端口映射</li><li>自动重启 unless-stopped/always</li><li>名称</li><li>挂载 db, conf, log, mysql-files(用于mysql dump)</li><li>root密码</li></ol></li><li>docker run -d -p 5901:5901 -v /mnt/md0/public/baiduyun:/mnt/drive_d -e vnc_password=92Hi4aJ6Fp6aLDj5 johnshine/baidunetdisk-crossover-vnc:latest</li></ol></li></ol><h2 id="_4-用户管理" tabindex="-1"><a class="header-anchor" href="#_4-用户管理" aria-hidden="true">#</a> 4. 用户管理</h2><p>Docker守候进程绑定的是一个unix  socket，而不是TCP端口。这个套接字默认的属主是root，其他是用户可以使用sudo命令来访问这个套接字文件。因为这个原因，docker服务进程都是以root帐号的身份运行的。</p><p>为了避免每次运行docker命令的时候都需要输入sudo，可以创建一个docker用户组，并把相应的用户添加到这个分组里面。当docker进程启动的时候，会设置该套接字可以被docker这个分组的用户读写。这样只要是在docker这个组里面的用户就可以直接执行docker命令了。</p><ul><li>查看docker相关的分组</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">cat</span> /etc/group <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>创建分组, 添加用户</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">groupadd</span> <span class="token parameter variable">-g</span> <span class="token number">999</span> <span class="token function">docker</span>   <span class="token comment"># 999是分组id, 可不指定</span>
<span class="token comment"># 添加用户</span>
<span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> dockerroot ec2-user
<span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> ec2-user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>确认创建成功</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> /etc/group
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>重启</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>确认能否直接运行</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> info
<span class="token comment"># 如果提示权限不足</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> a+rw /var/run/docker.sock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docket-network" tabindex="-1"><a class="header-anchor" href="#docket-network" aria-hidden="true">#</a> docket network</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create your-network-name

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用系统代理" tabindex="-1"><a class="header-anchor" href="#使用系统代理" aria-hidden="true">#</a> 使用系统代理</h2><ul><li><p>docker容器内有些操作网络受限, 这里使用系统代理</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> .docker
<span class="token function">vim</span>  ~/.docker/config.json
<span class="token comment"># {</span>
<span class="token comment">#     &quot;proxies&quot;:</span>
<span class="token comment">#     {</span>
<span class="token comment">#         &quot;default&quot;:</span>
<span class="token comment">#         {</span>
<span class="token comment">#             &quot;httpProxy&quot;: &quot;http://127.0.0.1:8888&quot;,</span>
<span class="token comment">#             &quot;httpsProxy&quot;: &quot;http://127.0.0.1:8888&quot;,</span>
<span class="token comment">#             &quot;noProxy&quot;: &quot;localhost&quot;</span>
<span class="token comment">#         }</span>
<span class="token comment">#     }</span>
<span class="token comment"># }</span>

<span class="token comment"># 启动时使用宿主网络 --net host</span>
<span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--net</span> <span class="token function">host</span>  <span class="token parameter variable">--name</span> <span class="token builtin class-name">test</span> centos
<span class="token function">curl</span> cip.cc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="other" tabindex="-1"><a class="header-anchor" href="#other" aria-hidden="true">#</a> Other</h2><ol><li>mac上容器访问宿主机<code>docker.for.mac.host.internal:5000</code></li><li>时区设置 <ol><li><p>启动时传递环境变量<code>-e TZ=Asia/Shanghai</code></p></li><li><p>Dockerfile</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># debian</span>
ENV <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token punctuation">\\</span>
<span class="token assign-left variable">DEBIAN_FRONTEND</span><span class="token operator">=</span>noninteractive

RUN <span class="token function">ln</span> <span class="token parameter variable">-fs</span> /usr/share/zoneinfo/<span class="token variable">\${TZ}</span> /etc/localtime <span class="token punctuation">\\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token variable">\${TZ}</span> <span class="token operator">&gt;</span> /etc/timezone <span class="token punctuation">\\</span>
    <span class="token operator">&amp;&amp;</span> dpkg-reconfigure <span class="token parameter variable">--frontend</span> noninteractive tzdata <span class="token punctuation">\\</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/apt/lists/*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol>`,21);function S(T,L){const e=c("ExternalLinkIcon");return o(),t("div",null,[d,s("ol",null,[p,s("li",null,[s("p",null,[n("RHEL 安装 踩坑参考("),s("a",u,[n("https://stackoverflow.com/questions/45415524/installing-docker-ce-in-redhat/47903707#47903707"),l(e)]),n(")")]),m]),s("li",null,[s("p",null,[n("安装最新版本"),s("a",v,[n("Install Docker Engine on CentOS"),l(e)]),n(" 0. 安装了历史版本"),k]),b])]),h,s("p",null,[n("参考菜鸟教程"),s("a",g,[n("https://www.runoob.com/docker/macos-docker-install.html"),l(e)])]),f,s("p",null,[n("参考"),s("a",_,[n("docker命令详解"),l(e)]),x,s("a",y,[n("全面教程"),l(e)])]),w,s("ol",null,[q,s("li",null,[s("p",null,[n("使用特权运行docker"),s("a",D,[n("https://blog.51cto.com/lizhenliang/1975466"),l(e)])]),P])]),C])}const O=i(r,[["render",S],["__file","docker.html.vue"]]);export{O as default};
