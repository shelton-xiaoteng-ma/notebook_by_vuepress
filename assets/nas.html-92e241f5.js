import{_ as t,Y as o,Z as p,a0 as s,a1 as a,a2 as e,a4 as l,E as i}from"./framework-957baa9a.js";const c={},r=l('<h1 id="nas" tabindex="-1"><a class="header-anchor" href="#nas" aria-hidden="true">#</a> Nas</h1><p>契机是和LP讨论生日礼物，想要移动硬盘，我的理解是这种东西安全性很差，数据很容易丢失，遂研究了公有云，又到NAS</p><h2 id="_1-选购" tabindex="-1"><a class="header-anchor" href="#_1-选购" aria-hidden="true">#</a> 1. 选购</h2><ul><li>1k左右的西部数据，功能太少</li><li>2k群晖 ARM架构的处理器，不支持docker</li><li>发现了公司用的terra master，同样价格用的Intel的处理器，2G内存</li></ul><p>最终选定F2-220，搭配单硬盘共1950元</p><h2 id="_2-配置" tabindex="-1"><a class="header-anchor" href="#_2-配置" aria-hidden="true">#</a> 2. 配置</h2>',6),u=s("li",null,[s("p",null,"系统"),s("ol",null,[s("li",null,"自带系统但十分不好用，资源也少，其实是不推荐的")])],-1),d=s("p",null,"网络",-1),k=s("li",null,"由于用光猫拨号，所以设置路由器为DMZ主机，又将NAS作为路由器的DMZ主机",-1),v=s("li",null,"花生壳，不考虑，域名太长，据说有流量限制，收费限制多 -- 失败",-1),b=s("li",null,"dyndns 反应慢，没有成功 -- 失败",-1),m=s("li",null,"路由器的ddns，TPlink不能登陆TPlinkID -- 失败",-1),h=s("li",null,"配置好二级域名解析nas,类型A",-1),_=s("li",null,"获取动态解析的API token",-1),g={href:"https://github.com/kkkgo/dnspod-ddns-with-bashshell",target:"_blank",rel:"noopener noreferrer"},f=s("li",null,"TOS垃圾，curl命令都没有，ssh登陆到root账号，创建了centos7的docker系统，然后配置脚本和定时任务，OK",-1),q=s("p",null,[a("Docker"),s("br"),a(" 系统很残，还是需要docker来做")],-1),$=l(`<li><p>mxt_centos</p><ol><li><p>run</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">-p</span> <span class="token number">22222</span>:22 <span class="token parameter variable">-v</span> /root/centos:/root <span class="token parameter variable">--name</span> mxt_centos <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true docker/mxt_centos /usr/sbin/init
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> docker_id /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>crontab</p><ol><li>系统缺少curl等命令, 但是docker对crontab的支持不好用, 最终解决如下</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/mnt/md0/application/bin/docker <span class="token builtin class-name">exec</span> mxt_centos /bin/bash <span class="token parameter variable">-c</span> <span class="token string">&quot;cd /root &amp; /usr/bin/sh /root/dnspod_ddns.sh &gt;/root/cron.log&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>dnspod 动态ip绑定域名</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 定时任务crontab来配置域名动态解析</span>
*/10 * * * * <span class="token function">sh</span> /home/dnspod_ddns.sh <span class="token operator">&gt;</span>/home/cron.log
<span class="token comment"># /home/dnspod_ddns.sh</span>
<span class="token comment">#Dnspod DDNS with BashShell</span>
<span class="token comment">#Github:https://github.com/kkkgo/dnspod-ddns-with-bashshell</span>
<span class="token comment">#More: https://03k.org/dnspod-ddns-with-bashshell.html</span>
<span class="token comment">#CONF START</span>
<span class="token assign-left variable">API_ID</span><span class="token operator">=</span><span class="token number">111374</span>
<span class="token assign-left variable">API_Token</span><span class="token operator">=</span>2551604e10be0d939b50e56d4ea1ae3f
<span class="token assign-left variable">domain</span><span class="token operator">=</span>maxiaoteng.xyz
<span class="token assign-left variable">host</span><span class="token operator">=</span>nas
<span class="token assign-left variable">CHECKURL</span><span class="token operator">=</span><span class="token string">&quot;http://ip.03k.org&quot;</span>
<span class="token comment">#OUT=&quot;pppoe&quot;</span>
<span class="token comment">#CONF END</span>
<span class="token builtin class-name">.</span> /etc/profile
<span class="token function">date</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>echo <span class="token variable">$CHECKURL</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-q</span> <span class="token string">&quot;://&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">then</span>
<span class="token assign-left variable">IPREX</span><span class="token operator">=</span><span class="token string">&#39;([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])&#39;</span>
<span class="token assign-left variable">URLIP</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-4</span> <span class="token parameter variable">-k</span> <span class="token punctuation">$(</span>if <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">$OUT</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;--interface <span class="token variable">$OUT</span>&quot;</span><span class="token punctuation">;</span> <span class="token keyword">fi</span><span class="token punctuation">)</span> <span class="token parameter variable">-s</span> $CHECKURL<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-Eo</span> <span class="token string">&quot;<span class="token variable">$IPREX</span>&quot;</span><span class="token operator">|</span><span class="token function">tail</span> <span class="token parameter variable">-n1</span><span class="token variable">)</span></span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>echo <span class="token variable">$URLIP</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-qEvo</span> <span class="token string">&quot;<span class="token variable">$IPREX</span>&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">then</span>
<span class="token assign-left variable">URLIP</span><span class="token operator">=</span><span class="token string">&quot;Get <span class="token variable">$DOMAIN</span> URLIP Failed.&quot;</span>
<span class="token keyword">fi</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;[URL IP]:<span class="token variable">$URLIP</span>&quot;</span>
<span class="token assign-left variable">dnscmd</span><span class="token operator">=</span><span class="token string">&quot;nslookup&quot;</span><span class="token punctuation">;</span><span class="token builtin class-name">type</span> <span class="token function">nslookup</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token operator">||</span><span class="token assign-left variable">dnscmd</span><span class="token operator">=</span><span class="token string">&quot;ping -c1&quot;</span>
<span class="token assign-left variable">DNSTEST</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>$dnscmd $host.$domain<span class="token variable">)</span></span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$?</span>&quot;</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$dnscmd</span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;nslookup&quot;</span> <span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">(</span>echo <span class="token variable">$DNSTEST</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-qEvo</span> <span class="token string">&quot;<span class="token variable">$IPREX</span>&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">then</span>
<span class="token assign-left variable">DNSIP</span><span class="token operator">=</span><span class="token string">&quot;Get <span class="token variable">$host</span>.<span class="token variable">$domain</span> DNS Failed.&quot;</span>
<span class="token keyword">else</span> <span class="token assign-left variable">DNSIP</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $DNSTEST<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-Eo</span> <span class="token string">&quot;<span class="token variable">$IPREX</span>&quot;</span><span class="token operator">|</span><span class="token function">tail</span> <span class="token parameter variable">-n1</span><span class="token variable">)</span></span>
<span class="token keyword">fi</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;[DNS IP]:<span class="token variable">$DNSIP</span>&quot;</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$DNSIP</span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;<span class="token variable">$URLIP</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;IP SAME IN DNS,SKIP UPDATE.&quot;</span>
<span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>
<span class="token keyword">fi</span>
<span class="token assign-left variable">token</span><span class="token operator">=</span><span class="token string">&quot;login_token=<span class="token variable">\${API_ID}</span>,<span class="token variable">\${API_Token}</span>&amp;format=json&amp;lang=en&amp;error_on_empty=yes&amp;domain=<span class="token variable">\${domain}</span>&amp;sub_domain=<span class="token variable">\${host}</span>&quot;</span>
<span class="token assign-left variable">Record</span><span class="token operator">=</span><span class="token string">&quot;$(curl -4 -k <span class="token variable"><span class="token variable">$(</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">$OUT</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;--interface <span class="token variable">$OUT</span>&quot;</span><span class="token punctuation">;</span> <span class="token keyword">fi</span><span class="token variable">)</span></span> -s -X POST https://dnsapi.cn/Record.List -d &quot;</span><span class="token variable">\${token}</span><span class="token string">&quot;)&quot;</span>
<span class="token assign-left variable">iferr</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">{</span>Record<span class="token comment">#*code}|cut -d&#39;&quot;&#39; -f3</span><span class="token variable">)</span></span>&quot;</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$iferr</span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;1&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
<span class="token assign-left variable">record_ip</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">{</span>Record<span class="token comment">#*value}|cut -d&#39;&quot;&#39; -f3</span><span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;[API IP]:<span class="token variable">$record_ip</span>&quot;</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$record_ip</span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;<span class="token variable">$URLIP</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;IP SAME IN API,SKIP UPDATE.&quot;</span>
<span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>
<span class="token assign-left variable">record_id</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">{</span>Record<span class="token comment">#*\\&quot;records\\&quot;\\:\\[\\{\\&quot;id\\&quot;}|cut -d&#39;&quot;&#39; -f2</span><span class="token variable">)</span></span>
<span class="token assign-left variable">record_line_id</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">{</span>Record<span class="token comment">#*line_id}|cut -d&#39;&quot;&#39; -f3</span><span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> Start DDNS update<span class="token punctuation">..</span>.
<span class="token assign-left variable">ddns</span><span class="token operator">=</span><span class="token string">&quot;$(curl -4 -k <span class="token variable"><span class="token variable">$(</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">$OUT</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;--interface <span class="token variable">$OUT</span>&quot;</span><span class="token punctuation">;</span> <span class="token keyword">fi</span><span class="token variable">)</span></span> -s -X POST https://dnsapi.cn/Record.Ddns -d &quot;</span><span class="token variable">\${token}</span><span class="token operator">&amp;</span><span class="token assign-left variable">record_id</span><span class="token operator">=</span><span class="token variable">\${record_id}</span><span class="token operator">&amp;</span><span class="token assign-left variable">record_line_id</span><span class="token operator">=</span><span class="token variable">\${record_line_id}</span><span class="token string">&quot;)&quot;</span>
<span class="token assign-left variable">ddns_result</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">{</span>ddns<span class="token comment">#*message\\&quot;}|cut -d&#39;&quot;&#39; -f2</span><span class="token variable">)</span></span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;DDNS upadte result:<span class="token variable">$ddns_result</span> &quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$ddns</span><span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-Eo</span> <span class="token string">&quot;<span class="token variable">$IPREX</span>&quot;</span><span class="token operator">|</span><span class="token function">tail</span> <span class="token parameter variable">-n1</span>
<span class="token keyword">else</span> <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> Get <span class="token variable">$host</span><span class="token builtin class-name">.</span><span class="token variable">$domain</span> error <span class="token builtin class-name">:</span>
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">{</span>Record<span class="token comment">#*message\\&quot;}</span><span class="token variable">)</span></span><span class="token operator">|</span><span class="token function">cut</span> -d<span class="token string">&#39;&quot;&#39;</span> <span class="token parameter variable">-f2</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>mysql</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> create <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span> docker_mysql <span class="token parameter variable">-v</span> /root/mysql:/var/lib/mysql <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>password mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,2),w=s("p",null,"baiduyun",-1),y={href:"https://github.com/john-shine/Docker-CodeWeavers_CrossOver-VNC/tree/master/BaiduNetdisk",target:"_blank",rel:"noopener noreferrer"},x=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5901</span>:5901 <span class="token parameter variable">-v</span> /mnt/md0/public/baiduyun:/mnt/drive_d <span class="token parameter variable">-e</span> <span class="token assign-left variable">vnc_password</span><span class="token operator">=</span>password johnshine/baidunetdisk-crossover-vnc:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),I=s("h2",{id:"_3-系统omv",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3-系统omv","aria-hidden":"true"},"#"),a(" 3. 系统OMV")],-1),P=s("p",null,"选择omv主要是原有系统太拉垮, 各种严格和不兼容, 和黑群晖(系统安装在每块硬盘下)相比, omv系统独立安装在U盘, 数据盘独立, 可以直接挂载到其他linux系统读写",-1),S=s("p",null,"安装",-1),D={href:"https://www.balena.io/etcher/",target:"_blank",rel:"noopener noreferrer"},N=s("li",null,"将系统和系统U盘插入, 自动安装和启动",-1),R={href:"https://forum.openmediavault.org/index.php/Thread/3453-Installing-OMV-w-o-keyboard-and-monitor-using-VirtualBox/",target:"_blank",rel:"noopener noreferrer"},T=s("ol",null,[s("li",null,"网络配置有问题")],-1),E=s("p",null,"配置(安全考虑, 只允许局域网访问)",-1),U=l("<li><p>主要包括文件服务和网络服务</p><ol><li>文件服务 <ol><li>SMB: 局域网主要通过SMB访问</li><li>kodexplorer: <ol><li>文档和图片需要简单预览</li><li>备份电脑以及手机文件时</li><li>多平台共享文件</li></ol></li></ol></li><li>网络服务</li></ol></li>",1),O=s("p",null,"开启服务",-1),A=l("<li>web页面 <ol><li>omv-firstaid设置</li><li>端口: 8181</li></ol></li><li>ssh <ol><li>端口: 9222</li></ol></li><li>docker</li><li><s>ftp</s><ol><li>21 22</li></ol></li><li>smb <ol><li>maxiaoteng</li><li>共享两个 <ol><li>for_guest 公开视频目录</li><li>maxiaoteng 整个目录</li></ol></li><li>服务 <ul><li>SMB➡️设置(启用)</li><li>共享(添加需要的文件夹), 需要在访问权限管理中先配置共享文件夹</li></ul></li></ol></li><li>jellyfin <ol><li>maxiaoteng</li><li>docker安装</li><li>8096</li></ol></li><li>mysql <ol><li>docker安装</li><li>3306</li></ol></li>",7),C={href:"https://www.jianshu.com/p/4731a1ef01d1",target:"_blank",rel:"noopener noreferrer"},L=s("li",null,"通过/data访问宿主机目录",-1),M=s("li",null,"设置防止crtf登录, 甚至可以加上验证码",-1),B=s("li",null,"除了管理员, 其他用户要想访问/data, 需要单独配置php",-1),V=s("li",null,[s("blockquote",null,[s("p",null,[a("docker run -d -p 9000:80 --name kodexplorer "),s("br"),a(" -v /srv/dev-disk-by-label-kulh2t/appdata/www:/var/www/html "),s("br"),a(" -v /srv:/data "),s("br"),a(" qinkangdeid/kodexplorer")])])],-1),X=l(`<li><p>插件</p><ol><li>lvm</li><li>omv extra</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> http://omv-extras.org/openmediavault-omvextrasorg_latest_all4.deb
dpkg <span class="token parameter variable">-i</span> openmediavault-omvextrasorg_latest_all4.deb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>文件系统</p><ol><li>wipe擦写磁盘</li><li>创建raid(可选)</li><li>创建lvm分区, 并挂载</li></ol></li><li><p>存储器 在分区上建立共享目录</p><ol><li>存储➡️磁盘, 可以查看现有硬盘</li><li>存储➡️逻辑卷管理, 相当于Windows的C/D盘 <ul><li>2T硬盘分两个 storage 保存所有自由数据 docker_lib(位于other, 200G)保存docker相关的,镜像, 数据库文件等</li><li>public1 500G 用来备份time machine</li></ul></li><li>存储➡️文件系统 用于格式化/挂载/卸载/删除之前的逻辑卷(分区), 可以全用ext4(兼容mac/linux/Windows), 也可以自由选择</li></ol></li>`,3),j=s("p",null,"配置time machine 备份mac",-1),G={href:"https://dannyda.com/2019/07/17/how-to-create-apple-time-machine-in-open-media-vault-omv/",target:"_blank",rel:"noopener noreferrer"},K=s("li",null,[a("创建时间机器备份磁盘 "),s("ul",null,[s("li",null,"创建共享文件夹: 访问权限管理➡️共享文件夹➡️添加➡️选择名称/路径(xx/timemachine)/设备")])],-1),F=s("li",null,[a("创建备份时间机器的用户, 将tm文件夹读写权限共享给它 "),s("ul",null,[s("li",null,"用户 选择tm用户, 特权将共享文件夹权限读写全选")])],-1),W=s("li",null,[s("p",null,"用户"),s("ul",null,[s("li",null,"添加, 所有访问服务器的用户都在此, 包括web界面/smb等"),s("li",null,"编辑"),s("li",null,"用户特权, 用于共享和设置权限")])],-1),H=s("li",null,[s("p",null,"共享文件夹 见访问权限管理➡️共享文件夹")],-1);function Z(Y,z){const n=i("ExternalLinkIcon");return o(),p("div",null,[r,s("ol",null,[u,s("li",null,[d,s("ol",null,[k,s("li",null,[a("动态IP解决(每次断电，再次拨号都会换IP)，域名解析 "),s("ol",null,[v,b,m,s("li",null,[a("最终使用dnspod动态解析 -- 成功 "),s("ol",null,[h,_,s("li",null,[a("采用脚本部署到nas"),s("a",g,[a("https://github.com/kkkgo/dnspod-ddns-with-bashshell"),e(n)])]),f])])])])])]),s("li",null,[q,s("ol",null,[$,s("li",null,[w,s("ol",null,[s("li",null,[s("p",null,[a("参考地址："),s("a",y,[a("https://github.com/john-shine/Docker-CodeWeavers_CrossOver-VNC/tree/master/BaiduNetdisk"),e(n)])]),x])])])])])]),I,P,s("ol",null,[s("li",null,[S,s("ol",null,[s("li",null,[a("常用安装 "),s("ol",null,[s("li",null,[a("使用U盘刻录omv系统镜像, 软件"),s("a",D,[a("balena"),e(n)])]),N])]),s("li",null,[a("也可以用虚拟机也可以安装后插入到主机上, 见"),s("a",R,[a("无显示器安装"),e(n)]),T])])]),s("li",null,[E,s("ol",null,[U,s("li",null,[O,s("ol",null,[A,s("li",null,[a("kodexplore "),s("ol",null,[s("li",null,[s("a",C,[a("https://www.jianshu.com/p/4731a1ef01d1"),e(n)])]),L,M,B,V])])])]),X,s("li",null,[j,s("ol",null,[s("li",null,[s("a",G,[a("https://dannyda.com/2019/07/17/how-to-create-apple-time-machine-in-open-media-vault-omv/"),e(n)])]),K,F])]),W,H])])])])}const J=t(c,[["render",Z],["__file","nas.html.vue"]]);export{J as default};
