import{_ as l,Y as o,Z as r,a0 as e,a1 as n,a2 as s,a4 as a,E as t}from"./framework-957baa9a.js";const c={},d=a('<h1 id="http-协议" tabindex="-1"><a class="header-anchor" href="#http-协议" aria-hidden="true">#</a> Http 协议</h1><h2 id="hypertext-transfer-protocol" tabindex="-1"><a class="header-anchor" href="#hypertext-transfer-protocol" aria-hidden="true">#</a> HyperText Transfer Protocol</h2><p>超文本传输协议</p><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2>',4),p=e("p",null,[e("strong",null,"URL"),n(": Uniform Resource Locator 统一资源标识符")],-1),h={href:"https://www.douban.com/note/5264875/?type=like#sep",target:"_blank",rel:"noopener noreferrer"},u=e("li",null,[e("p",null,[e("strong",null,"https"),n(": 超文本传输安全协议(HyperText Transfer Protocol Secure)")]),e("blockquote",null,[e("p",null,"防止电信运营商的劫持 安全 用户体验")])],-1),b=a(`<h2 id="请求方法" tabindex="-1"><a class="header-anchor" href="#请求方法" aria-hidden="true">#</a> 请求方法</h2><ul><li>GET 从制定的资源请求数据</li><li>POST 向指定的资源提交要被处理的数据</li><li>PUT 替换(更新)资源</li><li>DELETE 删除指定资源</li><li>HEAD 获得报文首部</li><li>OPTIONS 返回服务器支持的HTTP方法</li></ul><h2 id="状态码" tabindex="-1"><a class="header-anchor" href="#状态码" aria-hidden="true">#</a> 状态码</h2><ul><li><p>1xx<br> (信息性状态码)接收的请求正在处理</p></li><li><p>2XX</p><p>200 OK 成功<br> 204 No Content 代表服务器已经对请求成功处理, 但是没有返回内容<br> 206 Partial Content 表示客户端进行了范围请求</p></li><li><p>3XX</p><p>301 Moved Permanently 永久性重定向, 配合<code>Location</code>使用 302 Found 临时性重定向<br> 304 Not Modified 使用本地资源(比如缓存)</p></li><li><p>4XX</p><p>400 Bad Request 请求的内容有问题<br> 401 Unauthorized 未验证的请求<br> 403 Forbidden 请求资源的访问被服务器拒绝<br> 404 Not Found 服务器上无法找到请求的资源</p></li><li><p>5XX</p><p>500 Internal Server Error 服务器端在执行请求时发生了错误<br> 502 Bad Gateway nginx或者网关后面没有上游服务器能相应请求<br> 503 Service Unavailable 服务器暂时处于超负荷或正在进行停机维护<br> 504 Gateway Timeout 对nginx或者网关请求超时了</p></li></ul><h2 id="请求头" tabindex="-1"><a class="header-anchor" href="#请求头" aria-hidden="true">#</a> 请求头</h2><ul><li><p><strong>通用头部字段</strong><br> Cache 控制缓存的行为<br> Connection 逐条首部,连接的管理<br> Date 创建报文的日期<br> Pragma 报文指令<br> Trailer 报文末端的首部一览<br> Upgrade 升级为其他协议 Via 代理服务器的相关信息<br> Warning 错误通知</p></li><li><p><strong>常用字段Cache-Control</strong><br> 减少网络延迟和提升性能</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 禁止缓存  </span>
Cache-Control: no-store
Cache-Control: no-store, no-cache, must-revalidate
<span class="token comment"># 强制确认缓存</span>
Cache-Control: no-cache
<span class="token comment"># 私有缓存和公共缓存</span>
Cache-Control: private
Cache-Control: public
<span class="token comment"># 缓存过期机制</span>
Cache-Control: max-age<span class="token operator">=</span><span class="token number">31536000</span>  <span class="token comment"># 表示资源能够被缓存的最大时间(s)</span>
<span class="token comment"># 缓存验证确认</span>
Cache-Control: must-revalidate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>常用字段Connection</strong><br> 可以保持连接, 减少关闭网络连接的开销</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Connection: keep-alive
Connection: close
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>常用字段Via</strong></p></li></ul><h2 id="cookie-session" tabindex="-1"><a class="header-anchor" href="#cookie-session" aria-hidden="true">#</a> Cookie/Session</h2><p>HTTP是无状态协议, 需要设置机制记录用户状态, 用来:<code>登录状态记录, 限制登陆后显示页面</code></p><ul><li><p>Cookie</p><p>通过在请求和相应报文中写入Cookie信息来控制客户端的状态 服务端给客户端发送的报文有<code>Set-Cookie</code>项<br> 客户端解析<code>Set-Cookie</code>, 下次请求时, 就在请求报文中添加<code>Cookie</code>发送给服务器, 服务器就可以判断</p></li><li><p>Session</p><p>由于Cookie明文请求, 容易被伪造, 信息太多是影响请求效率 等原因, 引入session机制.<br> session保存在服务器端, 加密后将加密id作为Cookie返回给客户端</p></li></ul><h2 id="身份验证" tabindex="-1"><a class="header-anchor" href="#身份验证" aria-hidden="true">#</a> 身份验证</h2><ol><li><p>适用场景:</p><ul><li>移动设备API调用</li><li>第三方网站使用本网站进行身份认证, 且不希望直接注册本网站账号</li></ul></li><li><p>主流方案:</p><ul><li><p>基本认证(Basic access authentication), 认证步骤:</p><blockquote><ol><li>客户端请求一个需要身份验证的页面</li><li>如果输入错误, 返回401应答</li><li>用户输入用户名和密码后, 请求增加认证消息头, 服务器认证通过后, 返回正常页面</li></ol></blockquote></li><li><p>摘要式的认证(Digest access authentication)</p><p>在提交之前, 对密码进行一个加密函数</p></li><li><p>OAuth</p><p>允许用户让第三方应用访问该用户在某一网站上存储的私密资源, 而无需将用户名和密码提供给第三方应用</p></li><li><p>JWT(JSON Web Token)</p><p>头部</p></li></ul></li></ol><h2 id="代理" tabindex="-1"><a class="header-anchor" href="#代理" aria-hidden="true">#</a> 代理</h2><h2 id="http-2" tabindex="-1"><a class="header-anchor" href="#http-2" aria-hidden="true">#</a> HTTP/2</h2><p>优化了性能, 兼容htpp1的语义</p><ol><li>多路复用</li><li>二进制协议</li><li>表头压缩</li><li>服务端推送</li></ol>`,15);function m(v,C){const i=t("ExternalLinkIcon");return o(),r("div",null,[d,e("ul",null,[e("li",null,[p,e("blockquote",null,[e("p",null,[n("协议类型:[//服务器地址[:端口号]][/资源层级UNIX文件路径]文件名[?查询][#片段ID] eg:"),e("a",h,[n("https://www.douban.com/note/5264875/?type=like#sep"),s(i)]),n(" 端口默认: http 80 https 443 |#用作锚点, 定位页面的特定位置")])])]),u]),b])}const g=l(c,[["render",m],["__file","http.html.vue"]]);export{g as default};
