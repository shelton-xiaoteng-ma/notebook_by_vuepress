import{_ as p,Y as o,Z as c,a0 as n,a1 as a,a2 as e,a4 as t,E as i}from"./framework-957baa9a.js";const l="/images/kafka_01.png",r={},u=t('<h1 id="消息队列kafka" tabindex="-1"><a class="header-anchor" href="#消息队列kafka" aria-hidden="true">#</a> 消息队列Kafka</h1><p>主流消息队列：</p><ul><li>Kafka</li><li>RabbitMQ</li><li>ZeroMQ</li><li>阿里的RocketMQ</li></ul><h2 id="_1-优点" tabindex="-1"><a class="header-anchor" href="#_1-优点" aria-hidden="true">#</a> 1. 优点</h2><ol><li>应用解耦。消息是平台无关和语言无关的，消息队列可以应对多变的产品变更</li><li>异步通信。可以缩短请求等待的时间，使用专门处理请求的消费者来执行，提高Web页面的吞吐量，尤其是瞬间发生的高流量情况，消息队列非常有助于顶住访问压力</li><li>数据持久化。未完成的消息不会因为某些故障而丢失</li><li>送达保证。消息队列提供的冗余机制保证了消息确实能被处理。除非消费者明确表示已经处理完了这个消息，否则这个消息可以被放回队列中以备其他消费者处理</li></ol><h2 id="_2-kafka架构" tabindex="-1"><a class="header-anchor" href="#_2-kafka架构" aria-hidden="true">#</a> 2. Kafka架构</h2><p><img src="'+l+'" alt="架构图"></p><ol><li>话题（Topic）是特定类型的消息流。话题值是消息的分类名，物理上不同 Topic 的消息分开存储。逻辑上一个 Topic 的消 息虽然保存于一个或多个broker上，用户只需指定消息的 Topic即可生产或消费数据而不必关心数据存于何处</li><li>生产者（Producer）是能够发布消息到话题的任何对象</li><li>已发布的消息保存在一组服务器中，它们被称为代理（Broker）或Kafka集群(Cluster)</li><li>消费者可以订阅一个或多个话题，并从Broker拉数据，从而消费这些已发布的消息</li><li>分区(Partition)是物理上的概念，每个话题包含一个或多个分区，每个分区是一个有序的队列</li></ol><h2 id="_3-安装和使用" tabindex="-1"><a class="header-anchor" href="#_3-安装和使用" aria-hidden="true">#</a> 3. 安装和使用</h2><h3 id="_1-安装" tabindex="-1"><a class="header-anchor" href="#_1-安装" aria-hidden="true">#</a> 1. 安装</h3>',10),k={href:"https://kafka.apache.org/quickstart",target:"_blank",rel:"noopener noreferrer"},d=t(`<ol><li>下载并解压数据</li><li>由于kafka依赖zookeeper服务来运行，可以根据教程启动单一的zookeeper来启动kafka服务 zookeeper是一个分布式的，开放源码的分布式应用程序协调服务，它包含一个简单的原语集，分布式应用程序可以基于它实现同步服务，配置维护和命名服务等。</li><li>由于需要使用Java，我使用了<code>sudo yum install java</code> 来安装解决</li><li>服务启动在了tmux里面</li></ol><h3 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用" aria-hidden="true">#</a> 2. 使用</h3><ol><li>参照文档的命令行发送/接收消息</li><li>使用python库kafka，代码见后文。 kafka默认端口9092，发送接收均为byte类型 <ol><li><p>producer.py 生产者发送消息</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># </span>
<span class="token keyword">from</span> kafka <span class="token keyword">import</span> KafkaProducer
<span class="token keyword">from</span> kafka<span class="token punctuation">.</span>errors <span class="token keyword">import</span> KafkaError

producer <span class="token operator">=</span> KafkaProducer<span class="token punctuation">(</span>bootstrap_servers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;localhost:9092&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
future <span class="token operator">=</span> producer<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token string">b&#39;raw_bytes&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    record_metadata <span class="token operator">=</span> future<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> KafkaError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>record_metadata<span class="token punctuation">.</span>topic<span class="token punctuation">,</span> record_metadata<span class="token punctuation">.</span>partition<span class="token punctuation">,</span> record_metadata<span class="token punctuation">.</span>offset<span class="token punctuation">)</span>

producer<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token string">b&#39;foo&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">b&#39;bar&#39;</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>consumer.py 消费者自动监听</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> kafka <span class="token keyword">import</span> KafkaConsumer

consumer <span class="token operator">=</span> KafkaConsumer<span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> bootstrap_servers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;localhost:9092&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> message <span class="token keyword">in</span> consumer<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token punctuation">.</span>topic<span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token punctuation">.</span>partition<span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token punctuation">.</span>offset<span class="token punctuation">}</span></span><span class="token string">: key=</span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token punctuation">.</span>key<span class="token punctuation">}</span></span><span class="token string"> value=</span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>  <span class="token comment"># noqa</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>msgpack_producer.py 使用了msgpack包序列化消息(<code>It&#39;s like JSON.but fast and small.</code>)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> msgpack
<span class="token keyword">from</span> kafka <span class="token keyword">import</span> KafkaProducer
<span class="token keyword">from</span> kafka<span class="token punctuation">.</span>errors <span class="token keyword">import</span> KafkaError

producer <span class="token operator">=</span> KafkaProducer<span class="token punctuation">(</span>bootstrap_servers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;localhost:9092&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                        value_serializer<span class="token operator">=</span>msgpack<span class="token punctuation">.</span>dumps<span class="token punctuation">)</span>
producer<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
producer<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>msgpack_consumer.py</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> msgpack
<span class="token keyword">from</span> kafka <span class="token keyword">import</span> KafkaConsumer

consumer <span class="token operator">=</span> KafkaConsumer<span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> value_deserializer<span class="token operator">=</span>msgpack<span class="token punctuation">.</span>unpackb<span class="token punctuation">,</span>
                        bootstrap_servers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;localhost:9092&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> message <span class="token keyword">in</span> consumer<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token punctuation">.</span>topic<span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token punctuation">.</span>partition<span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token punctuation">.</span>offset<span class="token punctuation">}</span></span><span class="token string">: key=</span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token punctuation">.</span>key<span class="token punctuation">}</span></span><span class="token string"> value=</span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>  <span class="token comment"># noqa</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol><h2 id="_4-参考资料" tabindex="-1"><a class="header-anchor" href="#_4-参考资料" aria-hidden="true">#</a> 4. 参考资料</h2>`,4),m={href:"https://lotabout.me/2018/kafka-introduction/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://hackernoon.com/thorough-introduction-to-apache-kafka-6fbf2989bbc1",target:"_blank",rel:"noopener noreferrer"};function f(h,b){const s=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",k,[a("官方参考文档"),e(s)])]),d,n("ul",null,[n("li",null,[n("a",m,[a("kafka介绍和教程"),e(s)]),a("，讲了kafka的一些概念，消息保存关系，如何扩展，消费组关系，组内消费关系，何时删除消息等")]),n("li",null,[n("a",v,[a("详细介绍kafka和zookeeper"),e(s)])])])])}const _=p(r,[["render",f],["__file","kafka.html.vue"]]);export{_ as default};
