import{_ as e,Y as t,Z as a,a4 as i}from"./framework-957baa9a.js";const s={},l=i('<h1 id="beautifulsoup" tabindex="-1"><a class="header-anchor" href="#beautifulsoup" aria-hidden="true">#</a> BeautifulSoup</h1><p>driver.page_source 或其他的html文件</p><p>selenium的html文件: selenium stores the source HTML in the driver&#39;s page_source attribute</p><h2 id="解析器" tabindex="-1"><a class="header-anchor" href="#解析器" aria-hidden="true">#</a> 解析器</h2><p>python标准库: html.parser</p><h2 id="获取" tabindex="-1"><a class="header-anchor" href="#获取" aria-hidden="true">#</a> 获取</h2><h3 id="_1-查找标签" tabindex="-1"><a class="header-anchor" href="#_1-查找标签" aria-hidden="true">#</a> 1. 查找标签</h3><p>得到的是类: <code>&lt;class &#39;bs4.element.Tag&#39;&gt;</code>的实例</p><ul><li>soup.a soup.li soup.head # 查到的第一个标签</li><li>soup.find(&quot;div&quot;, {&quot;class&quot;: &quot;cities-rests&quot;}) # 查到指定条件的第一个标签</li><li>soup.find_all(&quot;li&quot;, {&quot;class&quot;: &quot;internal-link&quot;}) # 返回查到的所有标签, 类型: <code>&lt;class &#39;bs4.element.ResultSet&#39;&gt;</code>, 可迭代对象, 每个都是Tag</li><li>soup.contents # 按list返回子节点</li><li>soup.children</li></ul><h3 id="_2-获得tag的属性-和字典操作一致" tabindex="-1"><a class="header-anchor" href="#_2-获得tag的属性-和字典操作一致" aria-hidden="true">#</a> 2. 获得tag的属性, 和字典操作一致</h3><ul><li><p>soup.title.name # tag的名称, 返回 title</p></li><li><p>soup.title.parent.name # 返回title的父标签的名称</p></li><li><p>soup.p.attrs # 返回所有属性, 类型为<strong>字典</strong></p></li><li><p>soup.p[&#39;class&#39;] # 返回查到的p标签的class内容</p></li><li><p>soup.a[&#39;href&#39;] # 返回查到的a标签的href内容</p></li><li><p>soup.a.string # 返回text部分</p></li><li><p>soup.get(&quot;class&quot;) # 另一种方法</p></li></ul><p>多值属性返回为list, 如&#39;class&#39;,</p><h3 id="_3-可以修改" tabindex="-1"><a class="header-anchor" href="#_3-可以修改" aria-hidden="true">#</a> 3. 可以修改</h3>',13),o=[l];function u(r,p){return t(),a("div",null,o)}const n=e(s,[["render",u],["__file","beautifulsoup.html.vue"]]);export{n as default};
