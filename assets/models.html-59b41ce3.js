import{_ as t,Y as p,Z as e,a0 as s,a1 as n,a2 as o,a4 as l,E as c}from"./framework-957baa9a.js";const i={},u=s("h1",{id:"models-py",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#models-py","aria-hidden":"true"},"#"),n(" models.py")],-1),r={href:"https://www.cnblogs.com/sss4/p/7070942.html",target:"_blank",rel:"noopener noreferrer"},d=l(`<h2 id="_0-前言" tabindex="-1"><a class="header-anchor" href="#_0-前言" aria-hidden="true">#</a> 0. 前言</h2><p>ORM是什么？：(在django中，根据代码中的类自动生成数据库的表也叫--code first)<br> ORM：Object Relational Mapping(关系对象映射)<br> 类名对应------》数据库中的表名<br> 类属性对应---------》数据库里的字段<br> 类实例对应---------》数据库表里的一行数据<br> obj.id obj.name.....类实例对象的属性</p><p>Django orm的优势：<br> Django的orm操作本质上会根据对接的数据库引擎，翻译成对应的sql语句；所有使用Django开发的项目无需关心程序底层使用的是MySQL、Oracle、sqlite....，如果数据库迁移，只需要更换Django的数据库引擎即可；</p><ol><li><p>新建或修改models的三步骤:</p><ol><li>Change your models (in models.py).</li><li>Run <code>python manage.py makemigrations</code> to create migrations for those changes</li><li>Run <code>python manage.py migrate</code> to apply those changes to the database.</li></ol></li><li><p>说明</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 生效models的创建和更改</span>
python manage.py makemigrations
python manage.py makemigrations polls   <span class="token comment"># 指定app</span>
<span class="token comment"># 查看modles sql, 不执行仅用于调试判断是否符合预期</span>
python manage.py sqlmigrate polls 0001  <span class="token comment"># 0001是更新历史</span>
<span class="token comment"># 创建和更新表    \`INSTALLED_APPS\` 包含了一些默认组建方便使用, 这些组件可能需要使用数据库, 所以下列操作创建必要的表</span>
python manage.py migrate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_1-初始化models" tabindex="-1"><a class="header-anchor" href="#_1-初始化models" aria-hidden="true">#</a> 1. 初始化Models</h2><p>创建models.py来表示数据库关系</p><ol><li><p>数据库关系</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>- ForeignKey  <span class="token comment"># 外键, 设置一对多, 例如: models.ForeignKey(User, on_delete=models.CASCADE)  # on_delete在1.10版本上不需要</span>
- ManyToManyField  <span class="token comment"># 多对多关系,tags = models.ManyToManyField(Tag, blank=True)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>数据库内容类型</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">-</span> CharField  <span class="token comment"># 字符串</span>
<span class="token operator">-</span> TextField  <span class="token comment"># 很长的字符串</span>
<span class="token operator">-</span> DateTimeField  <span class="token comment"># 时间日期</span>
<span class="token operator">-</span> DateField  <span class="token comment"># 日期</span>
<span class="token operator">-</span> 枚举字段
    choice<span class="token operator">=</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;男人&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;女人&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;其他&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    lover<span class="token operator">=</span>models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>choices<span class="token operator">=</span>choice<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>内容参数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">-</span> max_length<span class="token operator">=</span><span class="token number">100</span>  
<span class="token operator">-</span> blank<span class="token operator">=</span><span class="token boolean">True</span> <span class="token comment"># 默认False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>例子</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models
<span class="token keyword">class</span> <span class="token class-name">Post</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 文章标题</span>
    tille <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">)</span>
    body <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    modified_time <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    category <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Category<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>
    tags <span class="token operator">=</span> models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span>Tag<span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>内置Model</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># django.contrib.auth 是 Django 内置的应用，专门用于处理网站用户的注册、登录等流程，User 是 Django 为我们已经写好的用户模型。</span>
<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>外键的创建</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>people_id <span class="token operator">=</span> ForeignKey<span class="token punctuation">(</span>XX<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="_2-django操作数据库" tabindex="-1"><a class="header-anchor" href="#_2-django操作数据库" aria-hidden="true">#</a> 2. Django操作数据库</h2><ol><li><p>增</p><ul><li><p>增加单个</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token comment"># 方法一</span>
    <span class="token keyword">from</span> blog<span class="token punctuation">.</span>models <span class="token keyword">import</span> Tag
    p1 <span class="token operator">=</span> Publisher<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;Apress&#39;</span><span class="token punctuation">,</span> address<span class="token operator">=</span><span class="token string">&#39;2855 Telegraph Avenue&#39;</span><span class="token punctuation">,</span>city<span class="token operator">=</span><span class="token string">&#39;Berkeley&#39;</span><span class="token punctuation">,</span> state_province<span class="token operator">=</span><span class="token string">&#39;CA&#39;</span><span class="token punctuation">,</span> country<span class="token operator">=</span><span class="token string">&#39;U.S.A.&#39;</span><span class="token punctuation">,</span>website<span class="token operator">=</span><span class="token string">&#39;http://www.apress.com/&#39;</span><span class="token punctuation">)</span>
    p1<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 方法二</span>
    p1 <span class="token operator">=</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;Apress&#39;</span><span class="token punctuation">,</span>address<span class="token operator">=</span><span class="token string">&#39;2855 Telegraph Avenue&#39;</span><span class="token punctuation">,</span>city<span class="token operator">=</span><span class="token string">&#39;Berkeley&#39;</span><span class="token punctuation">,</span>state_province<span class="token operator">=</span><span class="token string">&#39;CA&#39;</span><span class="token punctuation">,</span> country<span class="token operator">=</span><span class="token string">&#39;U.S.A.&#39;</span><span class="token punctuation">,</span>website<span class="token operator">=</span><span class="token string">&#39;http://www.apress.com/&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>批量增加</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    t1 <span class="token operator">=</span> Tag<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;name1&#39;</span><span class="token punctuation">)</span>
    t2 <span class="token operator">=</span> Tag<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;name2&#39;</span><span class="token punctuation">)</span>
    t3 <span class="token operator">=</span> Tag<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;name3&#39;</span><span class="token punctuation">)</span>
    t4 <span class="token operator">=</span> Tag<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;name4&#39;</span><span class="token punctuation">)</span>
    tags <span class="token operator">=</span> <span class="token punctuation">[</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> t3<span class="token punctuation">,</span> t4<span class="token punctuation">]</span>
    TAG<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>bulk_create<span class="token punctuation">(</span>tags<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>查</p><ol><li><p>查询全部</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">&gt;</span> <span class="token operator">&lt;</span>QuerySet <span class="token punctuation">[</span><span class="token operator">&lt;</span>Tag<span class="token punctuation">:</span> Tag <span class="token builtin">object</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>  <span class="token comment"># 返回类型</span>
    <span class="token comment"># 可迭代类型,每个都是model实例</span>
    <span class="token comment"># 返回list, 每个是dict</span>
    Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 返回list, 每个是list, 只保留value</span>
    Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values_list<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>条件查询</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    t <span class="token operator">=</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 返回一条数据, 当有多条或没有错误, 抛出异常</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>where 或 where not 查询</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    t <span class="token operator">=</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> 
    t <span class="token operator">=</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>exclude<span class="token punctuation">(</span>condition<span class="token punctuation">)</span>
    <span class="token comment"># condition语句支持 = 大于 小于, 与或非操作 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>连锁查询 需要同时进行过滤和排序查询的操作时，可以简单地写成这种“链式”的形式：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>country<span class="token operator">=</span><span class="token string">&quot;U.S.A.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">&quot;-name&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token operator">&lt;</span>Publisher<span class="token punctuation">:</span> O&#39;Reilly<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Publisher<span class="token punctuation">:</span> Apress<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>限制返回的语句</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token operator">&lt;</span>Publisher<span class="token punctuation">:</span> Apress<span class="token operator">&gt;</span>

    <span class="token comment"># 类似的，可以用Python的range-slicing语法来取出数据的特定子集：</span>
    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
    <span class="token comment"># 这个例子返回两个对象，等同于以下的SQL语句：</span>
    SELECT <span class="token builtin">id</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> address<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state_province<span class="token punctuation">,</span> country<span class="token punctuation">,</span> website
    FROM books_publisher
    ORDER BY name
    OFFSET <span class="token number">0</span> LIMIT <span class="token number">2</span><span class="token punctuation">;</span>

    <span class="token comment"># 注意，不支持Python的负索引(negative slicing)：</span>
    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    AssertionError<span class="token punctuation">:</span> Negative indexing <span class="token keyword">is</span> <span class="token keyword">not</span> supported<span class="token punctuation">.</span>

    <span class="token comment"># 虽然不支持负索引，但是可以使用其他的方法。 比如，修改order_by() 语句来实现：</span>
    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">&#39;-name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>改, 更新</p><ol><li><p>save()方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token comment"># save方法将会更新对象的所有信息,不管有没有更改</span>
    t <span class="token operator">=</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span>
    t<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;new_name&#39;</span>
    t<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 等效SQL</span>
    UPDATE books_publisher SET
        name <span class="token operator">=</span> <span class="token string">&#39;Apress Publishing&#39;</span><span class="token punctuation">,</span>
        address <span class="token operator">=</span> <span class="token string">&#39;2855 Telegraph Ave.&#39;</span><span class="token punctuation">,</span>
        city <span class="token operator">=</span> <span class="token string">&#39;Berkeley&#39;</span><span class="token punctuation">,</span>
        state_province <span class="token operator">=</span> <span class="token string">&#39;CA&#39;</span><span class="token punctuation">,</span>
        country <span class="token operator">=</span> <span class="token string">&#39;U.S.A.&#39;</span><span class="token punctuation">,</span>
        website <span class="token operator">=</span> <span class="token string">&#39;http://www.apress.com&#39;</span>
    WHERE <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token number">52</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>update()方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;Apress Publishing&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># update()对任何结果集都有效,可以同时更新多条</span>
    Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>country<span class="token operator">=</span><span class="token string">&#39;USA&#39;</span><span class="token punctuation">)</span>

    <span class="token comment"># 等效SQL语句</span>
    UPDATE books_publisher 
        SET name <span class="token operator">=</span> <span class="token string">&#39;Apress Publishing&#39;</span> 
    WHERE <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token number">52</span><span class="token punctuation">;</span>

    <span class="token comment"># 返回一个int型,表示更改的条数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>删</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token comment"># 删除数据库中的对象只需调用该对象的delete()方法即可：</span>
    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> p <span class="token operator">=</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;O&#39;Reilly&quot;</span><span class="token punctuation">)</span>
    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> p<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token operator">&lt;</span>Publisher<span class="token punctuation">:</span> Apress Publishing<span class="token operator">&gt;</span><span class="token punctuation">]</span>    <span class="token comment">#少了一条记录</span>

    <span class="token comment"># 同样我们可以在结果集上调用delete()方法同时删除多条记录。这一点与我们上一小节提到的update()方法相似：</span>
    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>country<span class="token operator">=</span><span class="token string">&#39;USA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token comment"># 删除数据时要谨慎！ 为了预防误删除掉某一个表内的所有数据，Django要求在删除表内所有数据时显示使用all()。</span>
    <span class="token comment"># 比如，下面的操作将会出错：</span>
    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>
    Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
    File <span class="token string">&quot;&lt;console&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    AttributeError<span class="token punctuation">:</span> <span class="token string">&#39;Manager&#39;</span> <span class="token builtin">object</span> has no attribute <span class="token string">&#39;delete&#39;</span>

    <span class="token comment"># 而一旦使用all()方法，所有数据将会被删除：</span>
    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 如果只需要删除部分的数据，就不需要调用all()方法。再看一下之前的例子：</span>
    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>country<span class="token operator">=</span><span class="token string">&#39;USA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>排序</p><ol><li>自定义排序</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token comment"># 升序排列：</span>
    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token operator">&lt;</span>Publisher<span class="token punctuation">:</span> Apress<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Publisher<span class="token punctuation">:</span> O&#39;Reilly<span class="token operator">&gt;</span><span class="token punctuation">]</span>

    <span class="token comment"># 降序排列：</span>
    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">&quot;-name&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token operator">&lt;</span>Publisher<span class="token punctuation">:</span> O&#39;Reilly<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Publisher<span class="token punctuation">:</span> Apress<span class="token operator">&gt;</span><span class="token punctuation">]</span>

    <span class="token comment"># 按多个字段排列（第二个字段会在第一个字段的值相同的情况下被使用到）：</span>
    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">&quot;state_province&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;address&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token operator">&lt;</span>Publisher<span class="token punctuation">:</span> Apress<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Publisher<span class="token punctuation">:</span> O&#39;Reilly<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>缺省默认排序</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">class</span> <span class="token class-name">Publisher</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
        name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>
        address <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
        city <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span>
        state_province <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>
        country <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
        website <span class="token operator">=</span> models<span class="token punctuation">.</span>URLField<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">def</span> <span class="token function">__unicode__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>name

        <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
            ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span>
        <span class="token comment"># 你可以在任意一个 模型 类中使用 Meta 类，来设置一些与特定模型相关的选项。 如果你设置了ordering这个选项，那么除非你检索时特意额外地使用了 order_by()，</span>
        否则，当你使用 Django 的数据库 API 去检索时，Publisher对象的相关返回值默认地都会按 name 字段排序。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_3-django中的q对象和复杂查询" tabindex="-1"><a class="header-anchor" href="#_3-django中的q对象和复杂查询" aria-hidden="true">#</a> 3. Django中的Q对象和复杂查询</h2><ol><li><p>多次查询</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 一般我们在Django程序中查询数据库操作都是在QuerySet里进行进行，例如下面代码:</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> q1 <span class="token operator">=</span> Entry<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>headline__startswith<span class="token operator">=</span><span class="token string">&quot;What&quot;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> q2 <span class="token operator">=</span> q1<span class="token punctuation">.</span>exclude<span class="token punctuation">(</span>pub_date__gte<span class="token operator">=</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> q3 <span class="token operator">=</span> q1<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pub_date__gte<span class="token operator">=</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>组合</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 两个Q默认为and的关系</span>
News<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>
    Q<span class="token punctuation">(</span>question__startswith<span class="token operator">=</span><span class="token string">&#39;Who&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Q<span class="token punctuation">(</span>pub_date<span class="token operator">=</span>date<span class="token punctuation">(</span><span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> Q<span class="token punctuation">(</span>pub_date<span class="token operator">=</span>date<span class="token punctuation">(</span><span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token comment"># 等价SQL语句</span>
SELECT <span class="token operator">*</span> <span class="token keyword">from</span> news
WHERE question LIKE <span class="token string">&#39;Who%&#39;</span>  AND <span class="token punctuation">(</span>pub_date <span class="token operator">=</span> <span class="token string">&#39;2005-05-02&#39;</span> ORpub_date <span class="token operator">=</span> <span class="token string">&#39;2005-05-06&#39;</span><span class="token punctuation">)</span>


<span class="token comment"># Q语句结合关键字查询时,需要关键字在前</span>
<span class="token comment">#正确的做法</span>
News<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>
    Q<span class="token punctuation">(</span>pub_date<span class="token operator">=</span>date<span class="token punctuation">(</span><span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> Q<span class="token punctuation">(</span>pub_date<span class="token operator">=</span>date<span class="token punctuation">(</span><span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    question__startswith<span class="token operator">=</span><span class="token string">&#39;Who&#39;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_4-选择数据库版本" tabindex="-1"><a class="header-anchor" href="#_4-选择数据库版本" aria-hidden="true">#</a> 4. 选择数据库版本</h2><p>见设置文件</p><h2 id="_5-安全操作" tabindex="-1"><a class="header-anchor" href="#_5-安全操作" aria-hidden="true">#</a> 5. 安全操作</h2><ol><li><p>Avoiding race conditions using F()</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 数据库级别操作 </span>
<span class="token keyword">from</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models <span class="token keyword">import</span> F
reporter <span class="token operator">=</span> Reporters<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;Tintin&#39;</span><span class="token punctuation">)</span>
reporter<span class="token punctuation">.</span>stories_filed <span class="token operator">=</span> F<span class="token punctuation">(</span><span class="token string">&#39;stories_filed&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
reporter<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,15);function k(m,v){const a=c("ExternalLinkIcon");return p(),e("div",null,[u,s("p",null,[n("[参考:"),s("a",r,[n("https://www.cnblogs.com/sss4/p/7070942.html"),o(a)]),n("]")]),d])}const g=t(i,[["render",k],["__file","models.html.vue"]]);export{g as default};
