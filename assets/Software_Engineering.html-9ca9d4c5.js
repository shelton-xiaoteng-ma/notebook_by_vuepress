import{_ as e,Y as i,Z as a,a4 as t}from"./framework-957baa9a.js";const n={},r=t('<h1 id="software-engineering" tabindex="-1"><a class="header-anchor" href="#software-engineering" aria-hidden="true">#</a> Software Engineering</h1><h2 id="sdlc" tabindex="-1"><a class="header-anchor" href="#sdlc" aria-hidden="true">#</a> SDLC</h2><p>Software Development life cycle, is a systematic process to develop high-quality software in a predictable timeframe and budget.</p><h3 id="key-advantages-of-the-sdlc" tabindex="-1"><a class="header-anchor" href="#key-advantages-of-the-sdlc" aria-hidden="true">#</a> Key advantages of the SDLC</h3><ul><li>A roadmap to the software development process, helping to reduce risk and improve efficiency</li><li>Increased communication between the team and stakeholders</li><li>Clearly defined and understood responsibilities for each team member</li><li>The ability to be used iteratively, allowing for changing requirements.</li></ul><h3 id="phases-of-the-sdlc" tabindex="-1"><a class="header-anchor" href="#phases-of-the-sdlc" aria-hidden="true">#</a> Phases of the SDLC</h3><ul><li>Planning <ul><li>requirements are gathered, analyzed, documented and prioritized.</li><li>After requirements have been gathered, they are combined into a document called a software requirements specification, or SRS, document.</li></ul></li><li>Design, design architecture, create a design document</li><li>Development</li><li>Testing</li><li>Deployment</li><li>Maintenance</li></ul><h3 id="building-quality-software" tabindex="-1"><a class="header-anchor" href="#building-quality-software" aria-hidden="true">#</a> Building Quality Software</h3><ul><li>Requirement gathering</li><li>Design transform requirements</li><li>Coding for quality entails</li><li>Testing for free of bugs</li><li>Release types include alpha(to a select group of stakeholders), beta(is given to the stakeholders outside of the developing organization), and general availability</li><li>Documenting (system documentation, User documentation)</li></ul><h3 id="steps-to-gathering-requirements" tabindex="-1"><a class="header-anchor" href="#steps-to-gathering-requirements" aria-hidden="true">#</a> steps to gathering requirements</h3><ul><li>identifying stakeholders</li><li>establishing goals and objectives</li><li>eliciting requirements from the stakeholders</li><li>documenting the requirements</li><li>analyzing and confirming the requirements</li><li>prioritizing</li></ul><h2 id="software-building-process-and-associated-roles" tabindex="-1"><a class="header-anchor" href="#software-building-process-and-associated-roles" aria-hidden="true">#</a> Software Building Process and Associated Roles</h2><h3 id="software-development-methodologies" tabindex="-1"><a class="header-anchor" href="#software-development-methodologies" aria-hidden="true">#</a> Software Development Methodologies</h3><ul><li>Waterfall</li><li>V-shape model</li><li>Agile</li></ul><h3 id="software-versions" tabindex="-1"><a class="header-anchor" href="#software-versions" aria-hidden="true">#</a> Software Versions</h3><ul><li>Version numbers indicate the history of changes, updates, and patches to software</li><li>Some version numbers follow the semantic numbering system and have 4 parts separated by a period</li><li>Compatibility with old and new versions of software is a common problem</li></ul><h3 id="software-testing" tabindex="-1"><a class="header-anchor" href="#software-testing" aria-hidden="true">#</a> Software Testing</h3><p>A test case contains: steps, inputs, data, and the expected corresponding outputs.</p><p>There are four testing levels: unit, integration, system, and acceptance.</p><ul><li>functional testing</li><li>non-functional testing(performance, security, scalability, and availability)</li><li>regression testing</li></ul>',20),s=[r];function l(o,d){return i(),a("div",null,s)}const c=e(n,[["render",l],["__file","Software_Engineering.html.vue"]]);export{c as default};
