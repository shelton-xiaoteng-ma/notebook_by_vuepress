import{_ as l,Y as i,Z as c,a0 as n,a1 as s,a2 as a,a3 as r,a4 as t,E as e}from"./framework-957baa9a.js";const u={},d=n("h1",{id:"request-and-response",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#request-and-response","aria-hidden":"true"},"#"),s(" Request and Response")],-1),k={href:"https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/request-response.html",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"cookie : scrapy 对cookie管理有很强的支持, 可以不需要去管理",-1),v=t(`<h2 id="request" tabindex="-1"><a class="header-anchor" href="#request" aria-hidden="true">#</a> Request</h2><h3 id="_1-基本参数" tabindex="-1"><a class="header-anchor" href="#_1-基本参数" aria-hidden="true">#</a> 1. 基本参数</h3><ol><li><p>headers</p></li><li><p>url(转义之后的，修改需用replace)</p></li><li><p>method</p></li><li><p>body (str，经过转义的)</p><ol><li><p>当method为post时使用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> urllib
<span class="token keyword">import</span> json
post_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment"># &#39;content-type&#39;: &#39;application/x-www-form-urlencoded; charset=UTF-8&#39;,</span>
post_data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>post_data<span class="token punctuation">,</span> doseq<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token comment"># &quot;Content-Type&quot;: &quot;application/json&quot;,</span>
post_data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>post_data<span class="token punctuation">)</span>
<span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>post_url<span class="token punctuation">,</span>
            method<span class="token operator">=</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
            body<span class="token operator">=</span>post_data<span class="token punctuation">,</span>
            headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>
            callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">,</span>
            dont_filter<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
            errback<span class="token operator">=</span>self<span class="token punctuation">.</span>errback_httpbin
        <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果是get方法,get请求的querystring, 需要使用: <code>url + &quot;?&quot; + urllib.parse.urlencode(dict)</code> 来自动拼接,不能在此处传入。</p></li></ol></li><li><p>cookies # 默认生效,接受dict</p><ol><li><p>普通添加cookie</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>cookies <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;PREF&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;TM={}277:L={}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>last_time<span class="token punctuation">,</span> keyword_urlencode<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;RQ&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;q=&amp;l={}&amp;ts={}114&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>keyword_urlencode<span class="token punctuation">,</span> before_time<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
request <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> 
                headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>
                cookies<span class="token operator">=</span>cookies<span class="token punctuation">,</span>
                callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">,</span> 
                errback<span class="token operator">=</span>self<span class="token punctuation">.</span>errback_httpbin<span class="token punctuation">,</span>
                dont_filter<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                meta<span class="token operator">=</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>dont_merge_cookies 此时cookies参数就不再适用, cookie中间件也不再处理set-cookie</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>custom_settings <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;COOKIES_ENABLED&#39;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
meta <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
meta<span class="token punctuation">[</span><span class="token string">&#39;dont_merge_cookies&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
self<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;Cookie&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;; &quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;=&quot;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> cookies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>meta<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> 
    callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">,</span> 
    errback<span class="token operator">=</span>self<span class="token punctuation">.</span>errback_httpbin<span class="token punctuation">,</span>
    meta<span class="token operator">=</span>meta<span class="token punctuation">,</span> 
    dont_filter<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>callback</p></li><li><p>meta</p><ul><li>上一个请求 request.meta[&#39;item&#39;] = item</li><li>下一个响应中response.meta[&#39;item&#39;] 便是item</li></ul></li><li><p>errback</p><ul><li>返回non-200时调用</li><li>比如：def errback_httpbin(self, failure): … ，</li><li>failure.check(ErrorType),</li><li>ErrorType有HttpError, DNSLookupError,TimeoutError, TCPTimeOutError…</li></ul></li><li><p>dont_filter(默认false, 过滤重复请求, 如果要处理302,301, 就需要设置成True)</p></li></ol><h2 id="_2-子类formrequest-发送post请求-可选" tabindex="-1"><a class="header-anchor" href="#_2-子类formrequest-发送post请求-可选" aria-hidden="true">#</a> 2. 子类FormRequest（发送post请求, 可选）</h2><ul><li><p>url</p></li><li><p>formdata(此处传入dict即可) iii. call_back iv. … v. FromRequest.from_response(response, formdata, call_back)</p></li></ul><ol><li>可以用来模拟用户登录</li><li>在login的方法中： return scrapy.FormRequest.from_response( response, formdata={&#39;name&#39;=&#39;xx&#39;, &#39;password&#39;=&#39;xx&#39;}, callback=self.after_login )</li></ol><h2 id="_3-dont-filter机制" tabindex="-1"><a class="header-anchor" href="#_3-dont-filter机制" aria-hidden="true">#</a> 3. dont_filter机制</h2><h2 id="_4-errback的处理" tabindex="-1"><a class="header-anchor" href="#_4-errback的处理" aria-hidden="true">#</a> 4. errback的处理</h2>`,8),b=n("br",null,null,-1),h=t(`<ol><li><p>调用方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 通常有三种情况会调用到errback</span>
<span class="token keyword">import</span> scrapy

<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spidermiddlewares<span class="token punctuation">.</span>httperror <span class="token keyword">import</span> HttpError
<span class="token keyword">from</span> twisted<span class="token punctuation">.</span>internet<span class="token punctuation">.</span>error <span class="token keyword">import</span> DNSLookupError
<span class="token keyword">from</span> twisted<span class="token punctuation">.</span>internet<span class="token punctuation">.</span>error <span class="token keyword">import</span> TimeoutError<span class="token punctuation">,</span> TCPTimedOutError

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">def</span> <span class="token function">errback_httpbin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># log all failures</span>
    self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>failure<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># in case you want to do something special for some errors,</span>
    <span class="token comment"># you may need the failure&#39;s type:</span>

    <span class="token keyword">if</span> failure<span class="token punctuation">.</span>check<span class="token punctuation">(</span>HttpError<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># these exceptions come from HttpError spider middleware</span>
        <span class="token comment"># you can get the non-200 response</span>
        response <span class="token operator">=</span> failure<span class="token punctuation">.</span>value<span class="token punctuation">.</span>response
        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&#39;HttpError on %s&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>

    <span class="token keyword">elif</span> failure<span class="token punctuation">.</span>check<span class="token punctuation">(</span>DNSLookupError<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># this is the original request</span>
        request <span class="token operator">=</span> failure<span class="token punctuation">.</span>request
        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&#39;DNSLookupError on %s&#39;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>

    <span class="token keyword">elif</span> failure<span class="token punctuation">.</span>check<span class="token punctuation">(</span>TimeoutError<span class="token punctuation">,</span> TCPTimedOutError<span class="token punctuation">)</span><span class="token punctuation">:</span>
        request <span class="token operator">=</span> failure<span class="token punctuation">.</span>request
        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&#39;TimeoutError on %s&#39;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>几种处理</p><ol><li><p>重试</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 通常都是在meta中保存请求的参数，可以放回redis或直接重构请求</span>
meta <span class="token operator">=</span> failure<span class="token punctuation">.</span>request<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对于HttpError的请求</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 可以取回status, url, headers(用来获取重定向的url)等</span>
response <span class="token operator">=</span> failure<span class="token punctuation">.</span>value<span class="token punctuation">.</span>response
url <span class="token operator">=</span> response<span class="token punctuation">.</span>url
status <span class="token operator">=</span> response<span class="token punctuation">.</span>status
headers <span class="token operator">=</span> response<span class="token punctuation">.</span>headers
<span class="token comment"># 如果返回302或301</span>
location <span class="token operator">=</span> headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;Location&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol><h2 id="response" tabindex="-1"><a class="header-anchor" href="#response" aria-hidden="true">#</a> Response</h2><h3 id="_1-基本属性" tabindex="-1"><a class="header-anchor" href="#_1-基本属性" aria-hidden="true">#</a> 1. 基本属性</h3><ol><li>url(string)</li><li>headers(dict)</li><li>status(integer)</li><li>body(bytes),</li><li>text # body.decode(&#39;utf-8&#39;) = text utf-8可以是其他类型, <code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></li><li>meta(dict)</li><li>flags(list)</li><li>request<br> 产生这个response的request对象，重定向后的request是原始的，所以<code>response.url == response.request.url</code> 不总是成立</li></ol>`,4);function f(_,g){const p=e("ExternalLinkIcon"),o=e("RouterLink");return i(),c("div",null,[d,n("p",null,[n("a",k,[s("中文文档"),a(p)]),m]),v,n("p",null,[s("scrapy默认情况下, 只有status在200-300之间时才会调用callback, 其他都由errback调用"),b,s(" 可以定义要进入callback的其他返回码"),a(o,{to:"/python/python_crawler/Scrapy/scrapy-setting.html"},{default:r(()=>[s("setting.md的处理HTTP错误")]),_:1}),s(",")]),h])}const q=l(u,[["render",f],["__file","request-and-response.html.vue"]]);export{q as default};
