import{_ as e,Y as o,Z as c,a0 as n,a1 as s,a2 as t,a4 as p,E as i}from"./framework-957baa9a.js";const l={},d=n("h1",{id:"正则表达式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#正则表达式","aria-hidden":"true"},"#"),s(" 正则表达式")],-1),r={href:"http://wiki.ubuntu.org.cn/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97",target:"_blank",rel:"noopener noreferrer"},u=p(`<h2 id="基本概念介绍" tabindex="-1"><a class="header-anchor" href="#基本概念介绍" aria-hidden="true">#</a> 基本概念介绍</h2><ol><li><p>元字符介绍</p><ul><li><p><code>.</code> 匹配任意字符</p></li><li><p><code>^</code><br> 在开头使用<code>^</code>将匹配类别的补集,比如: <code>[^5]</code>匹配除5之外的任意字符</p></li><li><p><code>$</code></p></li><li><p><code>*</code><br> 字符类中的<code>*</code>并不匹配字符<code>*</code>,而是指定前一个字符可以被匹配零次或更多次</p></li><li><p><code>+</code><br> 和<code>*</code>类似, 只是要求至少要出现一次</p></li><li><p><code>?</code> 用法和<code>*</code> <code>+</code> 类似, 匹配0次或1次</p></li><li><p><code>{</code><code>{m,n}</code>匹配<code>m{2,4}</code>匹配有2个,3个或4个m的字符串, m默认为0,n默认无穷大</p></li><li><p><code>[</code><code>&quot;[&quot; 和 &quot;]&quot;</code>用来制定一个字符类别, 比如: <code>[abc]</code>, <code>[a-c]</code>, 将匹配abc的任一字符</p></li><li><p><code>\\</code> 后面可加不同的元字符, 来取消元字符功能, 只作为普通字符. 比如: <code>[\\]\\[\\\\]</code>, 将匹配<code>]</code> <code>[</code> 和 <code>\\</code></p></li><li><p><code>\\d</code> 匹配任何十进制数；它相当于类 <code>[0-9]</code></p></li><li><p><code>\\D</code> 匹配任何非数字字符；它相当于类 <code>[^0-9]</code></p></li><li><p><code>\\s</code> 匹配任何空白字符；它相当于类<code>[ \\t\\n\\r\\f\\v]</code></p></li><li><p><code>\\S</code> 匹配任何非空白字符；它相当于类 <code>[^ \\t\\n\\r\\f\\v]</code></p></li><li><p><code>\\w</code> 匹配任何字母数字字符；它相当于类 <code>[a-zA-Z0-9_]</code></p></li><li><p><code>\\W</code> 匹配任何非字母数字字符；它相当于类<code>[^a-zA-Z0-9_]</code> 以上字符集可以包含在字符类中, 比如: <code>[\\s,.]</code> 匹配所有空白字符 , .</p></li><li><p><code>|</code></p></li><li><p><code>(</code></p></li><li><p><code>)</code></p></li></ul><blockquote><blockquote><p>注意: 元字符在类别中不起作用, 比如: <code>[abc$]</code>将匹配<code>$</code>, <code>$</code>作为普通字符</p></blockquote></blockquote></li><li><p>简单模式</p><p>字符匹配, 不定长匹配</p></li><li><p>重复匹配</p><p>除了匹配不定长字符集,另一个功能就是可以指定正则表达式的一部分的重复次数</p></li></ol><h2 id="使用正则表达式" tabindex="-1"><a class="header-anchor" href="#使用正则表达式" aria-hidden="true">#</a> 使用正则表达式</h2><ol><li><p>编译正则表达式</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
p <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&#39;ab*&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>  <span class="token comment"># &lt;_sre.SRE_Pattern object at 0xb76e1a70&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>如果匹配反斜杠\\, 尽量使用raw字符串, r&#39;\\strt&#39;, r&#39;\\n&#39;表示&#39;\\&#39;和&#39;n&#39;两个字符, &#39;\\n&#39;表示换行</code>.</p><ul><li>执行匹配 <code>match()</code> 决定RE是否在字符串刚开始的位置匹配<br><code>search()</code> 扫描字符串, 找到RE匹配的位置<br><code>findall()</code> 找到RE匹配的所有子串,并把他们作为一个列表返回<br><code>finditer()</code> 找到RE匹配的所有子串,并把他们作为一个迭代器返回</li></ul><blockquote><p>如果没有匹配, march和search返回None, 成功的话,返回MatchObject实例</p></blockquote></li><li><p>取回结果, <strong>MatchObject</strong> 有几个方法:</p><ul><li>group() 返回被RE匹配的字符串</li><li>start() 返回匹配开始的位置</li><li>end() 返回匹配结束的位置</li><li>span() 返回一个元组,包含匹配(开始,结束)的位置</li></ul></li></ol><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><ol><li><p>替换字符串中的换行符</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
<span class="token comment"># 构造pattern, 使用sub替换, 参数(pattern, &#39;&#39;, str, count, flag)</span>
<span class="token comment"># &#39;&#39;用来替换的内容, str是操作的字符串, count数量</span>
pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;[\\r\\n]&#39;</span><span class="token punctuation">)</span>
new_s <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;22222 \\r    33333 \\n   44444 \\r\\n  55555&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 或者直接使用</span>
new_s <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;[\\r\\n]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;22222 \\r    33333 \\n   44444 \\r\\n  55555&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_s<span class="token punctuation">)</span>
<span class="token comment"># 原有字符基础上替换</span>
new_s <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;给(\\d+?)加上&#39;</span><span class="token punctuation">,</span> <span class="token string">r&#39;给(\\1)加上&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;给555加上括号&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>分隔字符串</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;[_#|]&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;this_is#a|test&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;is&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用非贪婪匹配</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
tags <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r&quot;mm(.+?)ss&quot;</span><span class="token punctuation">,</span> target_str<span class="token punctuation">)</span>
<span class="token comment"># . 匹配所有</span>
<span class="token comment"># + 至少一个</span>
<span class="token comment"># ？ 非贪婪匹配，查找符合条件及停止</span>
<span class="token comment"># mmkhgoiurwss  返回  khgoiurw</span>
<span class="token comment"># 不包含括号，将匹配所有</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,6);function k(m,v){const a=i("ExternalLinkIcon");return o(),c("div",null,[d,n("p",null,[n("a",r,[s("参考ubuntu"),t(a)])]),u])}const h=e(l,[["render",k],["__file","re-model.html.vue"]]);export{h as default};
