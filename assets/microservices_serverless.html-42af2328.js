import{_ as e,Y as a,Z as i,a4 as s}from"./framework-957baa9a.js";const n={},l=s(`<h1 id="microservices-and-serverless" tabindex="-1"><a class="header-anchor" href="#microservices-and-serverless" aria-hidden="true">#</a> Microservices and Serverless</h1><h2 id="twelve-factor-app-methodology" tabindex="-1"><a class="header-anchor" href="#twelve-factor-app-methodology" aria-hidden="true">#</a> Twelve-Factor App Methodology</h2><p>Modern software development often delivers centrally hosted, web-based, software-as-a-service applications.</p><p>Code Phase</p><ul><li>Factor 1 Codebase <ul><li>Track the codebase for an application in a version control system, such as Git</li><li>Maintain one-to-one relationship between a codebase and an app</li><li>An app should be contained in a --single-- codebase</li></ul></li><li>Factor 5 Build, release, run <ul><li>Build stage compiles the code, gathers dependencies, and then transforms the codebase into an executable unit</li><li>Release stage combines the build with the deploymentâ€™s current configuration so that the code is ready to run</li><li>Run stage implements the application</li></ul></li><li>Factor 10 dev/prod parity <ul><li>Minimizes the differences between development and production environments</li></ul></li><li>Factor 2 Dependencies <ul><li>You must explicitly declare all dependencies</li></ul></li></ul><p>Deploy Phase</p><ul><li>Factor 3 Config <ul><li>You should avoid storing configurations as constants since configurations might differ among environments</li></ul></li><li>Factor 4 Backend Services <ul><li>A twelve-factor app should not distinguish between local and third-party services. Both should be accessible via a URL or other locator information along with any credentials</li></ul></li><li>Factor 6 Processes <ul><li>Processes should be stateless and share nothing. You should store persistent data in a backend service like a database</li></ul></li><li>Factor 7 Port binding <ul><li>Export services by port binding</li><li>Export HTTP and other services</li></ul></li></ul><p>Operate Phase</p><ul><li>Factor 8: Concurrency <ul><li>scale an application</li><li>Stateless processes can be spun up without creating dependencies on other processes</li></ul></li><li>Factor 9: Disposability <ul><li>Application processes require minimal startup time and should end gracefully when terminated</li></ul></li><li>Factor 11: Logs <ul><li>App should not concern itself with storing logs</li><li>Treat logs as an event stream written to standard output</li><li>Execution environment captures, aggregates, and routes logs to their destination</li></ul></li><li>Factor 12: Admin Processes <ul><li>Admin processes are one-off processes for managing an app</li></ul></li></ul><h2 id="microservices" tabindex="-1"><a class="header-anchor" href="#microservices" aria-hidden="true">#</a> Microservices</h2><p>No interdependency = Easy updates Different stack = Varied Expertise Smaller components = Scale independently</p><p>Microservices Patterns</p><ul><li>the single-page application (or SPA) pattern</li><li>the Backend for Frontend (or BFF) pattern</li><li>the Strangler pattern</li><li>the service discovery pattern</li></ul><h3 id="swagger" tabindex="-1"><a class="header-anchor" href="#swagger" aria-hidden="true">#</a> Swagger</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull swaggerapi/swagger-ui
<span class="token function">docker</span> run <span class="token parameter variable">-dp</span> <span class="token number">8080</span>:8080 swaggerapi/swagger-ui
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rest-api-and-graphql" tabindex="-1"><a class="header-anchor" href="#rest-api-and-graphql" aria-hidden="true">#</a> REST API and GraphQL</h2><p><code>API Gateway</code> is an API management tool that sits between a client and a collection of backend services. It aggregates the various services required to fulfill them and returns the appropriate result.</p><ul><li>IBM, an industry-leading, high-security application gateway called <code>IBM DataPower Gateway</code>.</li><li>Google has two offerings based on your needs: <code>Apigee</code> or <code>Cloud Endpoints</code>.</li><li><code>Microsoft Azure</code> and <code>Amazon AWS</code> also offer gateways on their platforms.</li><li>In the open source world, some famous names are: <code>Kong</code>, being top of the list in popularity, <code>Apache APISIX</code>, <code>Tyk</code>, which also has a managed version, and finally, <code>Gloo</code>, which is also available as an enterprise version.</li></ul><h2 id="serverless" tabindex="-1"><a class="header-anchor" href="#serverless" aria-hidden="true">#</a> Serverless</h2><ul><li>AWS Lambda provides you with an event-driven and pay-as-you-go serverless platform.</li><li>Google Cloud Functions provide you simplified developer experience along with Firebase for real-time data sync.</li><li>Microsoft Azure promotes cloud and edge computing.</li><li>IBM Cloud Functions give you high availability and cost-effective computing.</li><li>Knative is based on containers running via Kubernetes.</li></ul><h3 id="aws-lambda" tabindex="-1"><a class="header-anchor" href="#aws-lambda" aria-hidden="true">#</a> AWS lambda</h3><p>CodeCommit as your code repository</p><h2 id="final-project" tabindex="-1"><a class="header-anchor" href="#final-project" aria-hidden="true">#</a> Final Project</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ibmcloud ce application create <span class="token parameter variable">--name</span> prodlist <span class="token parameter variable">--image</span> us.icr.io/<span class="token variable">\${SN_ICR_NAMESPACE}</span>/prodlist --registry-secret icr-secret <span class="token parameter variable">--port</span> <span class="token number">5000</span> --build-context-dir products_list --build-source https://github.com/ibm-developer-skills-network/dealer_evaluation_backend.git
<span class="token comment"># https://prodlist.1f1gis0avao1.us-south.codeengine.appdomain.cloud</span>

ibmcloud ce application create <span class="token parameter variable">--name</span> dealerdetails <span class="token parameter variable">--image</span> us.icr.io/<span class="token variable">\${SN_ICR_NAMESPACE}</span>/dealerdetails --registry-secret icr-secret <span class="token parameter variable">--port</span> <span class="token number">8080</span> --build-context-dir dealer_details --build-source https://github.com/ibm-developer-skills-network/dealer_evaluation_backend.git
<span class="token comment"># https://dealerdetails.1f1gis0avao1.us-south.codeengine.appdomain.cloud</span>

ibmcloud ce application create <span class="token parameter variable">--name</span> frontend <span class="token parameter variable">--image</span> us.icr.io/<span class="token variable">\${SN_ICR_NAMESPACE}</span>/frontend --registry-secret icr-secret <span class="token parameter variable">--port</span> <span class="token number">5001</span> --build-context-dir <span class="token builtin class-name">.</span> --build-source <span class="token builtin class-name">.</span>
<span class="token comment"># https://frontend.1f1gis0avao1.us-south.codeengine.appdomain.cloud</span>

ibmcloud ce application get <span class="token parameter variable">-n</span> frontend
ibmcloud ce application delete <span class="token parameter variable">-n</span> dealerdetails
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),r=[l];function t(o,c){return a(),i("div",null,r)}const p=e(n,[["render",t],["__file","microservices_serverless.html.vue"]]);export{p as default};
